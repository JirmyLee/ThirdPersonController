//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Settings/My Input Asset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyInputAsset : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyInputAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""My Input Asset"",
    ""maps"": [
        {
            ""name"": ""default map"",
            ""id"": ""3d806dc7-e6f1-4a68-8052-18d569b9567d"",
            ""actions"": [
                {
                    ""name"": ""movement"",
                    ""type"": ""Value"",
                    ""id"": ""6d1e191e-7e31-4f90-bd4d-03d23a5852eb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""996584a5-ec1d-42e4-8f77-550758fef611"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""KeyBoard"",
                    ""id"": ""181a2490-152f-493f-b443-9182625a73cd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""66592fc5-1e2f-4519-a3a1-575c30e5a701"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b1149c41-e689-43ad-96d9-6f4e667b2ccd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""12bdda80-f140-4061-a083-4fe243e98c43"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f4e5e1ad-afa8-4e13-9b1e-c3f73282a0ff"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // default map
        m_defaultmap = asset.FindActionMap("default map", throwIfNotFound: true);
        m_defaultmap_movement = m_defaultmap.FindAction("movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // default map
    private readonly InputActionMap m_defaultmap;
    private IDefaultmapActions m_DefaultmapActionsCallbackInterface;
    private readonly InputAction m_defaultmap_movement;
    public struct DefaultmapActions
    {
        private @MyInputAsset m_Wrapper;
        public DefaultmapActions(@MyInputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @movement => m_Wrapper.m_defaultmap_movement;
        public InputActionMap Get() { return m_Wrapper.m_defaultmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultmapActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultmapActions instance)
        {
            if (m_Wrapper.m_DefaultmapActionsCallbackInterface != null)
            {
                @movement.started -= m_Wrapper.m_DefaultmapActionsCallbackInterface.OnMovement;
                @movement.performed -= m_Wrapper.m_DefaultmapActionsCallbackInterface.OnMovement;
                @movement.canceled -= m_Wrapper.m_DefaultmapActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_DefaultmapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @movement.started += instance.OnMovement;
                @movement.performed += instance.OnMovement;
                @movement.canceled += instance.OnMovement;
            }
        }
    }
    public DefaultmapActions @defaultmap => new DefaultmapActions(this);
    public interface IDefaultmapActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
